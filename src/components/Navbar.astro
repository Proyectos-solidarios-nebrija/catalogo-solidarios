---
import Moon from '@components/icons/Moon.astro'
import Sun from '@components/icons/Sun.astro'
import LanguagePicker from '@components/LanguagePicker.astro'
import { getLangFromUrl, useTranslations } from 'src/i18n/utils'
import { getRelativeLocaleUrl } from 'astro:i18n'
import { removeTraillingSlash } from '../helpers/removeTraillingSlash'

const currentLang = getLangFromUrl(Astro.url)
const t = useTranslations(currentLang)
---

<nav>
  <a href={getRelativeLocaleUrl(currentLang, '/')} id="link-home">
    <img
      src="/images/logoNebrija.png"
      alt={t('alt.nebrijaLogoImg')}
      height={55}
    />
  </a>
  <ul class="links">
    <li>
      <a
        href={removeTraillingSlash(
          getRelativeLocaleUrl(currentLang, `#${t('nav.projects')}`)
        )}>{t('nav.projects')}</a
      >
    </li>
    <li>
      <a
        href={removeTraillingSlash(
          getRelativeLocaleUrl(currentLang, `#${t('nav.gallery')}`)
        )}>{t('nav.gallery')}</a
      >
    </li>
    <li>
      <a href={getRelativeLocaleUrl(currentLang, 'quienes-somos')}
        >{t('nav.whoWeAre')}</a
      >
    </li>
    <li>
      <a href={getRelativeLocaleUrl(currentLang, 'noticias')}>{t('nav.news')}</a
      >
    </li>
    <li class="config">
      <button aria-label={t('aria.switchTheme')} id="btn-theme-toggler">
        <span id="theme-toggler-dark-icon">
          <Moon />
        </span>
        <span id="theme-toggler-light-icon">
          <Sun />
        </span>
      </button>
      <LanguagePicker />
    </li>
  </ul>
</nav>

<script>
  const LOCAL_STORAGE_THEME_KEY = 'theme'
  const html = document.querySelector('html') as HTMLElement
  const selectedTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY)
  const systemSettingDark = window.matchMedia(
    '(prefers-color-scheme: dark)'
  ).matches

  const THEMES = {
    dark: 'dark',
    light: 'light'
  }

  const setThemePreference = (theme) => {
    if (theme === THEMES.dark) {
      localStorage.setItem(LOCAL_STORAGE_THEME_KEY, THEMES.dark)
      html.classList.add(THEMES.dark)
    } else {
      localStorage.setItem(LOCAL_STORAGE_THEME_KEY, THEMES.light)
      html.classList.remove(THEMES.dark)
    }
  }

  // Set up the select theme
  if (selectedTheme === THEMES.dark || (systemSettingDark && !selectedTheme)) {
    setThemePreference(THEMES.dark)
  } else {
    setThemePreference(THEMES.light)
  }

  document.addEventListener('astro:after-swap', () => {
    const selectedTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY)
    setThemePreference(selectedTheme)
  })

  document.addEventListener('astro:page-load', () => {
    const btnThemeToggler = document.querySelector(
      '#btn-theme-toggler'
    ) as HTMLButtonElement

    btnThemeToggler.addEventListener('click', () => {
      const currentTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY)
      const isDarkTheme = currentTheme === THEMES.dark

      if (isDarkTheme) {
        setThemePreference(THEMES.light)
      } else {
        setThemePreference(THEMES.dark)
      }
    })
  })
</script>

<style>
  nav {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    margin-top: 25px;
    margin-bottom: 50px;
  }

  #link-home {
    transition:
      filter 0.3s ease,
      transform 0.3s ease;
  }

  #link-home:hover {
    transform: scale(1.1);
    filter: drop-shadow(rgba(0, 0, 0, 0.2) 0px 5px 15px);
  }

  html[class='dark'] #link-home:hover {
    filter: drop-shadow(rgba(99, 99, 99, 0.2) 0px 5px 15px);
  }

  #link-home:active {
    transform: scale(0.9);
  }

  ul {
    list-style: none;
    font-size: 3rem;
    display: flex;
    text-align: end;
    flex-direction: column;
    gap: 15px;
    padding: 0;
    margin: 0;
  }

  .links :global(a) {
    text-decoration: none;
    position: relative;
  }

  .links :global(a):hover::before {
    transform-origin: 0% 50%;
    transform: scale3d(1, 1, 1);
  }

  .links :global(a)::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 1px;
    background: currentColor;
    top: 100%;
    left: 0;
    pointer-events: none;
    transform-origin: 100% 50%;
    transform: scale3d(0, 1, 1);
    transition: transform 0.3s;
  }

  .config {
    display: flex;
    gap: 15px;
    justify-content: end;
    align-items: center;
  }

  img {
  }

  html[class='dark'] img {
    filter: invert(0.5) brightness(2);
  }

  html #theme-toggler-light-icon {
    display: none;
  }

  html[class='dark'] #theme-toggler-dark-icon {
    display: none;
  }

  html[class='dark'] #theme-toggler-light-icon {
    display: block;
  }

  html #theme-toggler-dark-icon {
    display: block;
  }

  button {
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
  }

  .config :global(svg) {
    width: 3rem;
    height: 3rem;
  }

  #btn-theme-toggler {
    border: none;
    cursor: pointer;
  }

  @media (width <= 800px) {
    ul {
      gap: 10px;
    }

    img {
      height: 35px;
    }
  }
</style>
